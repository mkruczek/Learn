package pl.michalkruczek.learn.db;

import org.greenrobot.greendao.annotation.*;

import pl.michalkruczek.learn.db.DaoSession;
import org.greenrobot.greendao.DaoException;

import java.util.Calendar;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "QUESTION".
 */
@Entity(active = true)
public class Question {

    @Id(autoincrement = true)
    private Long id;
    private Long categoryId;
    private String question;
    private String answer;
    private String describe;
    private java.util.Date addDate;
    private java.util.Date nextRepeat;
    private Integer level;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient QuestionDao myDao;

    @ToOne(joinProperty = "categoryId")
    private Category category;

    @Generated
    private transient Long category__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Question() {
    }

    public Question(Long id) {
        this.id = id;
    }

    @Generated
    public Question(Long id, Long categoryId, String question, String answer, String describe, java.util.Date addDate, java.util.Date nextRepeat, Integer level) {
        this.id = id;
        this.categoryId = categoryId;
        this.question = question;
        this.answer = answer;
        this.describe = describe;
        this.addDate = addDate;
        this.nextRepeat = nextRepeat;
        this.level = level;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public String getQuestion() {
        return question;
    }

    public void setQuestion(String question) {
        this.question = question;
    }

    public String getAnswer() {
        return answer;
    }

    public void setAnswer(String answer) {
        this.answer = answer;
    }

    public String getDescribe() {
        return describe;
    }

    public void setDescribe(String describe) {
        this.describe = describe;
    }

    public java.util.Date getAddDate() {
        return addDate;
    }

    public void setAddDate(java.util.Date addDate) {
        this.addDate = addDate;
    }

    public java.util.Date getNextRepeat() {
        return nextRepeat;
    }

    public void setNextRepeat(java.util.Date nextRepeat) {
        this.nextRepeat = nextRepeat;
    }

    public Integer getLevel() {
        return level;
    }

    public void setLevel(Integer level) {
        this.level = level;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Category getCategory() {
        Long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    @Generated
    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString(){
        return question +" : " + answer + " - " + nextRepeat;
    }

    public void setDateOfNextRepeat(){

        Calendar calendar = Calendar.getInstance();

        switch (level){
            case 0:
                calendar.add(Calendar.DATE, 2);
                nextRepeat = calendar.getTime();
                break;
            case 1:
                calendar.add(Calendar.DATE, 5);
                nextRepeat = calendar.getTime();
                break;
            case 2:
                calendar.add(Calendar.DATE, 23);
                nextRepeat = calendar.getTime();
                break;
            case 3:
                calendar.add(Calendar.DATE, 30);
                nextRepeat = calendar.getTime();
                break;
            case 4:
                calendar.add(Calendar.DATE, 60);
                nextRepeat = calendar.getTime();
                break;
            case 5:
                calendar.add(Calendar.DATE, 90);
                nextRepeat = calendar.getTime();
                break;
            case 666: // only for test
                calendar.add(Calendar.DATE, 0);
                nextRepeat = calendar.getTime();

        }

    }
    // KEEP METHODS END

}
