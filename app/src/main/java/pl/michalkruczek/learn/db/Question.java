package pl.michalkruczek.learn.db;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Color;
import android.view.View;

import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;

import org.greenrobot.greendao.annotation.*;

import pl.michalkruczek.learn.R;
import pl.michalkruczek.learn.db.DaoSession;

import org.greenrobot.greendao.DaoException;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "QUESTION".
 */
@Entity(active = true)
public class Question {

    @Id(autoincrement = true)
    private Long id;
    private Long categoryId;
    private String question;
    private String answer;
    private String describe;
    private java.util.Date addDate;
    private java.util.Date nextRepeat;
    private Integer level;
    private String history;

    /**
     * Used to resolve relations
     */
    @Generated
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    @Generated
    private transient QuestionDao myDao;

    @ToOne(joinProperty = "categoryId")
    private Category category;

    @Generated
    private transient Long category__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Question() {
    }

    public Question(Long id) {
        this.id = id;
    }

    @Generated
    public Question(Long id, Long categoryId, String question, String answer, String describe, java.util.Date addDate, java.util.Date nextRepeat, Integer level, String history) {
        this.id = id;
        this.categoryId = categoryId;
        this.question = question;
        this.answer = answer;
        this.describe = describe;
        this.addDate = addDate;
        this.nextRepeat = nextRepeat;
        this.level = level;
        this.history = history;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public String getQuestion() {
        return question;
    }

    public void setQuestion(String question) {
        this.question = question;
    }

    public String getAnswer() {
        return answer;
    }

    public void setAnswer(String answer) {
        this.answer = answer;
    }

    public String getDescribe() {
        return describe;
    }

    public void setDescribe(String describe) {
        this.describe = describe;
    }

    public java.util.Date getAddDate() {
        return addDate;
    }

    public void setAddDate(java.util.Date addDate) {
        this.addDate = addDate;
    }

    public java.util.Date getNextRepeat() {
        return nextRepeat;
    }

    public void setNextRepeat(java.util.Date nextRepeat) {
        this.nextRepeat = nextRepeat;
    }

    public Integer getLevel() {
        return level;
    }

    public void setLevel(Integer level) {
        this.level = level;
    }

    public String getHistory() {
        return history;
    }

    public void setHistory(String history) {
        this.history = history;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    @Generated
    public Category getCategory() {
        Long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
                category__resolvedKey = __key;
            }
        }
        return category;
    }

    @Generated
    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString() {
        return question + " : " + answer + " - " + nextRepeat;
    }

    public void setDateOfNextRepeat() {

        Calendar calendar = Calendar.getInstance();

        switch (level) {
            case 0:
                calendar.add(Calendar.DATE, 1);
                nextRepeat = calendar.getTime();
                break;
            case 1:
                calendar.add(Calendar.DATE, 2);
                nextRepeat = calendar.getTime();
                break;
            case 2:
                calendar.add(Calendar.DATE, 5);
                nextRepeat = calendar.getTime();
                break;
            case 3:
                calendar.add(Calendar.DATE, 23);
                nextRepeat = calendar.getTime();
                break;
            case 4:
                calendar.add(Calendar.DATE, 30);
                nextRepeat = calendar.getTime();
                break;
            case 5:
                calendar.add(Calendar.DATE, 60);
                nextRepeat = calendar.getTime();
                break;
            case 6:
                calendar.add(Calendar.DATE, 90);
                nextRepeat = calendar.getTime();
                break;
        }
    }

    public void checkMissesOutRepeat() {

        if (nextRepeat.before(new Date())) {
            nextRepeat = new Date();
        }
    }

    public void makeChart(Context context) {

        String test = getHistory();

        String[] history = this.getHistory().split(",");

        View lineChartLayout = View.inflate(context, R.layout.chart_layout, null);

        LineChart lineChart = (LineChart) lineChartLayout.findViewById(R.id.lineChart);

        List<Entry> entries = new ArrayList<Entry>();

        for (int i = 0; i < history.length; i++) {
            entries.add(new Entry((float) i, Float.valueOf(history[i])));
        }

        LineDataSet lineDataSet = new LineDataSet(entries, "history");
        lineDataSet.setColor(Color.BLUE);
        LineData lineData = new LineData(lineDataSet);
        lineChart.setData(lineData);
        lineChart.setVisibleXRange(5f, 10f);
        lineChart.invalidate();


        AlertDialog ad = new AlertDialog.Builder(context)
                .setView(lineChartLayout)
                .setTitle("Learn Progress")
                .setNegativeButton("END", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        dialogInterface.dismiss();
                    }
                })
                .show();
    }

    public void makeHistory() {
        history += "," + level;
    }

    // KEEP METHODS END

}
